// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pittheo.projects.template.domain;

import java.lang.Float;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import pittheo.projects.template.domain.UserProfile;

privileged aspect UserProfileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserProfileDataOnDemand: @Component;
    
    private Random UserProfileDataOnDemand.rnd = new SecureRandom();
    
    private List<UserProfile> UserProfileDataOnDemand.data;
    
    public UserProfile UserProfileDataOnDemand.getNewTransientUserProfile(int index) {
        UserProfile obj = new UserProfile();
        setCoordX(obj, index);
        setCoordY(obj, index);
        setFirstName(obj, index);
        setLocationName(obj, index);
        setSurname(obj, index);
        setThumbnailPath(obj, index);
        setWebsite(obj, index);
        return obj;
    }
    
    public void UserProfileDataOnDemand.setCoordX(UserProfile obj, int index) {
        Float coordX = new Integer(index).floatValue();
        obj.setCoordX(coordX);
    }
    
    public void UserProfileDataOnDemand.setCoordY(UserProfile obj, int index) {
        Float coordY = new Integer(index).floatValue();
        obj.setCoordY(coordY);
    }
    
    public void UserProfileDataOnDemand.setFirstName(UserProfile obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void UserProfileDataOnDemand.setLocationName(UserProfile obj, int index) {
        String locationName = "locationName_" + index;
        obj.setLocationName(locationName);
    }
    
    public void UserProfileDataOnDemand.setSurname(UserProfile obj, int index) {
        String surname = "surname_" + index;
        obj.setSurname(surname);
    }
    
    public void UserProfileDataOnDemand.setThumbnailPath(UserProfile obj, int index) {
        String thumbnailPath = "thumbnailPath_" + index;
        obj.setThumbnailPath(thumbnailPath);
    }
    
    public void UserProfileDataOnDemand.setWebsite(UserProfile obj, int index) {
        String website = "website_" + index;
        obj.setWebsite(website);
    }
    
    public UserProfile UserProfileDataOnDemand.getSpecificUserProfile(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UserProfile obj = data.get(index);
        return UserProfile.findUserProfile(obj.getId());
    }
    
    public UserProfile UserProfileDataOnDemand.getRandomUserProfile() {
        init();
        UserProfile obj = data.get(rnd.nextInt(data.size()));
        return UserProfile.findUserProfile(obj.getId());
    }
    
    public boolean UserProfileDataOnDemand.modifyUserProfile(UserProfile obj) {
        return false;
    }
    
    public void UserProfileDataOnDemand.init() {
        data = UserProfile.findUserProfileEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UserProfile' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<pittheo.projects.template.domain.UserProfile>();
        for (int i = 0; i < 10; i++) {
            UserProfile obj = getNewTransientUserProfile(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
