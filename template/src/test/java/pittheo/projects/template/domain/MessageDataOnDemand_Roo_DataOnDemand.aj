// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pittheo.projects.template.domain;

import java.lang.Boolean;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pittheo.projects.template.domain.Message;
import pittheo.projects.template.domain.MessageType;
import pittheo.projects.template.domain.UserAccount;
import pittheo.projects.template.domain.UserAccountDataOnDemand;

privileged aspect MessageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MessageDataOnDemand: @Component;
    
    private Random MessageDataOnDemand.rnd = new SecureRandom();
    
    private List<Message> MessageDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand MessageDataOnDemand.userAccountDataOnDemand;
    
    public Message MessageDataOnDemand.getNewTransientMessage(int index) {
        Message obj = new Message();
        setContent(obj, index);
        setFlagged(obj, index);
        setFolder(obj, index);
        setIsRead(obj, index);
        setLastViewed(obj, index);
        setReceiver(obj, index);
        setSender(obj, index);
        setSentAt(obj, index);
        setSpam(obj, index);
        setSubject(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void MessageDataOnDemand.setContent(Message obj, int index) {
        String content = "content_" + index;
        obj.setContent(content);
    }
    
    public void MessageDataOnDemand.setFlagged(Message obj, int index) {
        Boolean flagged = Boolean.TRUE;
        obj.setFlagged(flagged);
    }
    
    public void MessageDataOnDemand.setFolder(Message obj, int index) {
        String folder = "folder_" + index;
        obj.setFolder(folder);
    }
    
    public void MessageDataOnDemand.setIsRead(Message obj, int index) {
        Boolean isRead = Boolean.TRUE;
        obj.setIsRead(isRead);
    }
    
    public void MessageDataOnDemand.setLastViewed(Message obj, int index) {
        Date lastViewed = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastViewed(lastViewed);
    }
    
    public void MessageDataOnDemand.setReceiver(Message obj, int index) {
        UserAccount receiver = userAccountDataOnDemand.getRandomUserAccount();
        obj.setReceiver(receiver);
    }
    
    public void MessageDataOnDemand.setSender(Message obj, int index) {
        UserAccount sender = userAccountDataOnDemand.getRandomUserAccount();
        obj.setSender(sender);
    }
    
    public void MessageDataOnDemand.setSentAt(Message obj, int index) {
        Date sentAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSentAt(sentAt);
    }
    
    public void MessageDataOnDemand.setSpam(Message obj, int index) {
        Boolean spam = Boolean.TRUE;
        obj.setSpam(spam);
    }
    
    public void MessageDataOnDemand.setSubject(Message obj, int index) {
        String subject = "subject_" + index;
        obj.setSubject(subject);
    }
    
    public void MessageDataOnDemand.setType(Message obj, int index) {
        MessageType type = MessageType.class.getEnumConstants()[0];
        obj.setType(type);
    }
    
    public Message MessageDataOnDemand.getSpecificMessage(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Message obj = data.get(index);
        return Message.findMessage(obj.getId());
    }
    
    public Message MessageDataOnDemand.getRandomMessage() {
        init();
        Message obj = data.get(rnd.nextInt(data.size()));
        return Message.findMessage(obj.getId());
    }
    
    public boolean MessageDataOnDemand.modifyMessage(Message obj) {
        return false;
    }
    
    public void MessageDataOnDemand.init() {
        data = Message.findMessageEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Message' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<pittheo.projects.template.domain.Message>();
        for (int i = 0; i < 10; i++) {
            Message obj = getNewTransientMessage(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
