// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pittheo.projects.template.domain;

import java.lang.Boolean;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import pittheo.projects.template.domain.Message;
import pittheo.projects.template.domain.MessageType;
import pittheo.projects.template.domain.UserAccount;

privileged aspect Message_Roo_Finder {
    
    public static TypedQuery<Message> Message.findMessagesByFolderEquals(String folder) {
        if (folder == null || folder.length() == 0) throw new IllegalArgumentException("The folder argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT o FROM Message AS o WHERE o.folder = :folder", Message.class);
        q.setParameter("folder", folder);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesBySender(UserAccount sender) {
        if (sender == null) throw new IllegalArgumentException("The sender argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT o FROM Message AS o WHERE o.sender = :sender", Message.class);
        q.setParameter("sender", sender);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesBySpam(Boolean spam) {
        if (spam == null) throw new IllegalArgumentException("The spam argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT o FROM Message AS o WHERE o.spam = :spam", Message.class);
        q.setParameter("spam", spam);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesByType(MessageType type) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT o FROM Message AS o WHERE o.type = :type", Message.class);
        q.setParameter("type", type);
        return q;
    }
    
}
